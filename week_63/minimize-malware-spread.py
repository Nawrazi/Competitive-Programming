# https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parents = [-1 for _ in range(n)]
        sources = [0 for _ in range(n)]
        
        def find(node):
            if parents[node] < 0:
                return node
            parents[node] = find(parents[node])
            return parents[node]
        
        def union(node1, node2):
            parent1, parent2 = find(node1), find(node2)
            
            if parents[parent1] > parents[parent2]:
                parent1, parent2 = parent2, parent1
                
            if parent1 != parent2:
                parents[parent1] += parents[parent2]
                parents[parent2] = parent1
                
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    union(i, j)
                    
        for node in initial:
            sources[find(node)] += 1
            
        best = (0, -min(initial))
        for node in initial:
            parent = find(node)
            if sources[parent] == 1:
                size = -parents[parent]
                best = max(best, (size, -node))
                
        return -best[1]
    
